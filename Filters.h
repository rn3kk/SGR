//---------------------------------------------------------------------------

#ifndef FiltersH
#define FiltersH


#include <math.h>
#include <values.h>
#include <mem.h>

#ifndef TWOPI
#define TWOPI 2*M_PI
#endif

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////  ПОЛОСОВОЙ ФИЛЬТР /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
class TFilter
{ protected:
  private:
        float *Z;  // память фильтра
        float *B;  // коэффициенты
        int N;
        float F0;
  public:
        TFilter(float F1, float F2);
        ~TFilter();
        void filter(float * x, int n, float * y);
        float filter(float x);
        float getF0(void);
};
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//////////// Рекурсивный ФНЧ из нескольких простейших звеньев //////////////////
////////////////////////////////////////////////////////////////////////////////
class TIIRLPF
{
  private:
   double A, B;
   double * Y;
   int N;
  public:
        TIIRLPF(float Fs, int Nz);
        ~TIIRLPF();
        double filter(double x);
        float filter(float * x, int n);

};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/////////// Рекурсивный полосовой фильтр 2-го порядка //////////////////////////
////////////////////////////////////////////////////////////////////////////////
class TIIRBPF2
{ private:
    double A0, A1, A2;
    double B1, B2;
    double Y0, Y1, Y2;
    double X0, X1, X2;
    float F0, BW0;
  public:
        double f0, ph, dph, ddph;
        TIIRBPF2(float Fc, float BW);
        float filter(float x);
        float filter(float x[], int n, float y[]);
        float getF0(void);
        float getBW(void);
   
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////



#endif
