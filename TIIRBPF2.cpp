#include <math.h>
#include <values.h>
#include <mem.h>
#include "TIIRBPF2.h"

#ifndef TWOPI
#define TWOPI 2*M_PI
#endif

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
TIIRBPF2::TIIRBPF2(float Fc, float BW)
{
 // Fc - центральная частота фильтра
 // BW - полоса фильтра по 0.707 нормированная 0...0,5
 double K, R;
 F0=Fc;  BW0=BW;
 R=1-3*BW;
 K=(1-2*R*cos(2*M_PI*Fc)+R*R)/(2-2*cos(2*M_PI*Fc));
 A0=1-K;
 A1=2*(K-R)*cos(2*M_PI*Fc);
 A2=R*R-K;
 B1=2*R*cos(2*M_PI*Fc);
 B2=-R*R;
 X2=X1=X0=0;
 Y2=Y1=Y0=0;
 ph=M_PI/512.0;
 dph=2*M_PI*Fc;
 f0=Fc;
 ddph=0.0;
}
//------------------------------------------------------------------------------
float TIIRBPF2::filter(float x)
{
 X2=X1; X1=X0; X0=x;
 Y2=Y1; Y1=Y0;
 Y0=A0*X0+A1*X1+A2*X2+B1*Y1+B2*Y2;
 return Y0;
}
//------------------------------------------------------------------------------
float TIIRBPF2::filter(float x[], int n, float y[])
{
 for(int i=0; i<n; i++) y[i]=filter(x[i]);
 return y[n-1];
}
//------------------------------------------------------------------------------
float TIIRBPF2::getF0(void)
{
     return (F0);
}
//------------------------------------------------------------------------------
float TIIRBPF2::getBW(void)
{
     return (BW0);
}
//------------------------------------------------------------------------------
 